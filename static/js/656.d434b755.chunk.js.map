{"version":3,"file":"static/js/656.d434b755.chunk.js","mappings":"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","sources":["api/api.js","components/Cast/Cast.styled.js","components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.styled.js","pages/Collection/Collection.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const API_IMG = {\n  IMAGE_URL: 'https://image.tmdb.org/t/p',\n}\n\nexport const fetchFilms = async page => {\n    const response = await axios.get('/trending/movie/week', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        page: page\n      }\n    })\n    \n    return response;\n};\n\nexport const fetchFilmsByGenre = async () => {\n    const response = await axios.get('/genre/movie/list', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        \n      }\n    })\n    \n  return response ;\n};\n\nexport const fetchFilmsById = async (id) => {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data;\n};\nexport const fetchFilmsByExternalId = async (id) => {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data;\n};\n\nexport const fetchFilmsByCredits = async (id) => {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data.cast;\n};\n\nexport const fetchFilmsReviews = async (id) => {\n    const response = await axios.get(`/movie/${id}/reviews`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n  return response.data.results;\n};\n\nexport const fetchFilmsByQuery = async (query, page) => {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        query: query,\n        page: page,\n      }\n    })\n  \n  return response;\n};\n\nexport const fetchVideo = async id => {\n  const response = await axios.get(`/movie/${id}/videos`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    }\n  );\n  return response.data.results;\n};\n\n\n  \n\n\n","import styled from \"styled-components\";\n\n\nexport const Wrapper = styled.div`\n  margin-top:35px;\n`\nexport const TextWrapper = styled.div`\n  padding:10px;\n  \n`\nexport const PageTitle = styled.h2`\n  margin-top:15px;\n`\nexport const Poster = styled.img`\n    height:300px;\n    width: 100%;\n    object-fit: cover;\n    border-bottom: 1px solid rgb(204, 204, 204);\n`\nexport const Title = styled.h3`\n    margin-bottom: 5px;\n    text-align: center;\n    font-size: 16px;\n    text-transform: uppercase;\n`\n\nexport const Text = styled.p`\n  margin: auto;\n    height: 100%;\n    font-size: 18px;\n    text-align: center;\n    color: dark-grey;\n      &:not(:last-child) {\n        margin-bottom: 10px;\n      }\n`\n\nexport const List = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n    gap: 20px 10px;\n`;\n\nexport const ListItem = styled.li`\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: rgb(0 0 0 / 20%) 0px 1px 3px 0px, rgb(0 0 0 / 14%) 0px 2px 5px 0px, rgb(0 0 0 / 12%) 0px 2px 10px -1px;\n`;\n\nexport const LoaderWrapper = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  /* bring your own prefixes */\n  transform: translate(-50%, -50%);\n`","import styled from \"styled-components\";\n\nexport const Item = styled.li``;\n\nexport const Image = styled.img`\n  width: 100%;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  object-fit: cover;\n  box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 2px 5px 0 rgb(0 0 0 / 14%),\n    0 2px 10px -1px rgb(0 0 0 / 12%);\n  transition: all 250ms ease-in-out;\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    transform: scale(1.05) translateY(-5px);\n    box-shadow: 0px 5px 14px 2px rgba(0, 0, 0, 0.55);\n  }\n  @media screen and (max-width: 767px) {\n    min-height: 420px;\n  }\n  @media screen and (min-width: 768px) and (max-width: 1023px) {\n    min-height: 450px;\n  }\n  @media screen and (min-width: 1024px) {\n    min-height: 310px;\n  }\n`;\n\nexport const TitleH2 = styled.h2`\n  min-height: 28px;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 14px;\n  text-transform: uppercase;\n  color: var(--color-dark-grey);\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Genres = styled.p`\n  display: inline-block;\n  margin-right: 10px;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 16px;\n  color: var(--color-green);\n`;\n\nexport const Rating = styled.p`\n  min-width: 36px;\n  height: 16px;\n  border-radius: 5px;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 12px;\n  text-align: center;\n  line-height: 16px;\n  color: #ffffff;\n  background-color: ${props => {\n  if (props.rating <= 4) {\n    return `tomato`\n  }\n  if (props.rating <= 7) {\n    return `#F78D05`\n  }\n  if (props.rating <= 10) {\n    return `var(--color-green)`\n  }\n  } };\n`;","import { Link, useLocation } from \"react-router-dom\"\nimport { Item,Image, TitleH2, Info, Genres, Rating } from \"./MovieItem.styled\"\nimport { useState } from \"react\";\nimport { API_IMG } from \"api/api\";\nimport defaultImage from \"../../Images/defaultImage.png\"\nimport PropTypes from 'prop-types';\n\n\nexport const MovieItem = ({ id, posterPath, title, genres, releaseDate, rating }) => {\n  const [isPosterLoaded, setIsPosterLoaded] = useState(false);\n  const location = useLocation();\n  return (\n    <Item>\n      <Link\n        to={`/movies/${id}`} state={{ from: location }}\n      >\n        <Image\n          src={\n            posterPath && isPosterLoaded\n              ? `${API_IMG.IMAGE_URL}/w300${posterPath}`\n              : defaultImage\n          }\n          alt={title}\n          onLoad={() => setIsPosterLoaded(true)}\n          width=\"300\"\n          height=\"450\"\n        />\n      </Link>\n\n      <TitleH2>{title}</TitleH2>\n\n      <Info>\n        <Genres>\n          {genres} | {releaseDate.substring(0, 4)}\n        </Genres>\n        <Rating rating={rating} >{rating.toFixed(1)}</Rating>\n      </Info>\n    </Item>\n  )\n\n}\n\n\nMovieItem.propTypes = { \n  id: PropTypes.number,\n  posterPath: PropTypes.string ,\n  title: PropTypes.string,\n  genres: PropTypes.array,\n  releaseDate:PropTypes.string ,\n  rating:PropTypes.number ,\n}","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  display: grid;\n  margin-top:40px;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n  margin-bottom: 50px;\n`;","import { List} from '../../components/MovieList/MovieList.styled'\nimport { MovieItem } from 'components/MovieItem/MovieItem.jsx';\nimport { collection, getDocs } from \"firebase/firestore\"; \nimport { db  } from '../../utils/firebase.js'\nimport { useState, useEffect } from \"react\";\nimport { UserContext } from 'components/hooks/userContext.js';\nimport { useContext } from 'react';\nimport { InfoTitle } from './Collection.styled';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { LoaderWrapper } from 'components/Cast/Cast.styled';\n\nconst Collection = () => {\n  \n  const [stateId, setStateId] = useState([]);\n  const [status, setStatus] = useState(\"idle\")\n  const { userUid } = useContext(UserContext);\n  const userKey = localStorage.getItem(\"USER_KEY\");\n\n\n  useEffect(() => {\n    setStatus(\"pending\")\n    const FireBase = async () => {\n\n        const querySnapshot = await getDocs(collection(db, userUid || userKey));\n        let arr = [];\n        querySnapshot.forEach((doc) => {  \n        arr.push(doc.data())\n        });\n        setStateId(arr)\n        arr.length === 0 ? setStatus(\"rejected\") : setStatus(\"resolved\")\n\n  }\n  FireBase ();\n  }, [userKey, userUid])\n  if (status === 'pending') {\n    return (\n      <LoaderWrapper>\n        <CircularProgress color=\"success\" />\n      </LoaderWrapper>\n    )\n  }\n  \n  if (status === \"resolved\") {\n    return (\n      <List>\n      {stateId.map(({ title, rating, posterPath, id, releaseDate, genres }) => {\n        return (\n            <MovieItem\n              key={id}\n              id={id}\n              posterPath={posterPath}\n              title={title}\n              releaseDate={releaseDate || '\\u2015'}\n              rating={rating}\n              genres={genres || '\\u2015'}\n            />\n          )\n      })}\n    </List>\n  )\n}\nif (status === \"rejected\") {\n  return (\n    <InfoTitle>To create collection you should to add few movies</InfoTitle>\n  )\n}\n  \n}\n\nexport default Collection"],"names":["axios","API_IMG","IMAGE_URL","fetchFilms","page","params","api_key","response","fetchFilmsByGenre","fetchFilmsById","id","data","fetchFilmsByCredits","cast","fetchFilmsReviews","results","fetchFilmsByQuery","query","fetchVideo","Wrapper","styled","TextWrapper","Poster","Title","Text","List","ListItem","LoaderWrapper","Item","Image","TitleH2","Info","Genres","Rating","props","rating","MovieItem","posterPath","title","genres","releaseDate","useState","isPosterLoaded","setIsPosterLoaded","location","useLocation","to","state","from","src","defaultImage","alt","onLoad","width","height","substring","toFixed","stateId","setStateId","status","setStatus","userUid","useContext","UserContext","userKey","localStorage","getItem","useEffect","FireBase","getDocs","collection","db","querySnapshot","arr","forEach","doc","push","length","color","map"],"sourceRoot":""}