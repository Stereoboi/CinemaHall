{"version":3,"file":"static/js/779.f021f62a.chunk.js","mappings":"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","sources":["api/api.js","components/Cast/Cast.styled.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const API_IMG = {\n  IMAGE_URL: 'https://image.tmdb.org/t/p',\n}\n\nexport const fetchFilms = async page => {\n    const response = await axios.get('/trending/movie/week', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        page: page\n      }\n    })\n    \n    return response;\n};\n\nexport const fetchFilmsByGenre = async () => {\n    const response = await axios.get('/genre/movie/list', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        \n      }\n    })\n    \n  return response ;\n};\n\nexport const fetchFilmsById = async (id) => {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data;\n};\nexport const fetchFilmsByExternalId = async (id) => {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data;\n};\n\nexport const fetchFilmsByCredits = async (id) => {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data.cast;\n};\n\nexport const fetchFilmsReviews = async (id) => {\n    const response = await axios.get(`/movie/${id}/reviews`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n  return response.data.results;\n};\n\nexport const fetchFilmsByQuery = async (query, page) => {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        query: query,\n        page: page,\n      }\n    })\n  \n  return response;\n};\n\nexport const fetchVideo = async id => {\n  const response = await axios.get(`/movie/${id}/videos`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    }\n  );\n  return response.data.results;\n};\n\n\n  \n\n\n","import styled from \"styled-components\";\n\n\nexport const Wrapper = styled.div`\n  margin-top:35px;\n`\nexport const TextWrapper = styled.div`\n  padding:10px;\n  \n`\nexport const PageTitle = styled.h2`\n  margin-top:15px;\n`\nexport const Poster = styled.img`\n    height:300px;\n    width: 100%;\n    object-fit: cover;\n    border-bottom: 1px solid rgb(204, 204, 204);\n`\nexport const Title = styled.h3`\n    margin-bottom: 5px;\n    text-align: center;\n    font-size: 16px;\n    text-transform: uppercase;\n`\n\nexport const Text = styled.p`\n  margin: auto;\n    height: 100%;\n    font-size: 18px;\n    text-align: center;\n    color: dark-grey;\n      &:not(:last-child) {\n        margin-bottom: 10px;\n      }\n`\n\nexport const List = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n    gap: 20px 10px;\n`;\n\nexport const ListItem = styled.li`\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: rgb(0 0 0 / 20%) 0px 1px 3px 0px, rgb(0 0 0 / 14%) 0px 2px 5px 0px, rgb(0 0 0 / 12%) 0px 2px 10px -1px;\n`;\n\nexport const LoaderWrapper = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  /* bring your own prefixes */\n  transform: translate(-50%, -50%);\n`","import styled from \"styled-components\";\n\nexport const ErrorTitle = styled.h3`\n    margin-top:40px;\n    font-size: 40px;\n    text-transform: uppercase;\n`\n\nexport const ReviewList = styled.ul`\n  margin-top:35px;\n  height: 100%;\n\n`;\n\nexport const ReviewItem = styled.li`\n  border-bottom: 2px solid lightgrey;\n  overflow: auto;\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const ReviewAuthorWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ReviewAuthorAvatar = styled.img`\n  width: 50px;\n  height: 50px;\n  margin-right: 10px;\n  object-fit: cover;\n  border-radius: 50%;\n`;\n\nexport const ReviewAuthorName = styled.b`\n  text-transform: uppercase;\n  color: var(--color-dark-grey);\n`;\n\nexport const ReviewContent = styled.p`\n  padding: 20px 0;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.67;\n  color: var(--color-dark-grey);\n`;\n\nexport const NotFoundMessage = styled.p`\n  margin-bottom: 30px;\n  text-align: center;\n  font-weight: 500;\n  font-size: 30px;\n  color: red;\n`;","import { useParams, } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { fetchFilmsReviews } from \"api/api\";\nimport * as Scroll from 'react-scroll';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { LoaderWrapper } from \"components/Cast/Cast.styled\";\nimport {\n  ReviewList,\n  ReviewItem,\n  ReviewAuthorWrapper,\n  ReviewAuthorAvatar,\n  ReviewAuthorName,\n  ReviewContent,\n} from \"./Reviews.styled\";\nimport { API_IMG } from \"api/api\";\nimport Default from \"../../Images/Default.png\"\nimport { InfoTitle } from \"pages/Collection/Collection.styled\";\n\nconst Reviews = () => { \nconst { movieId } = useParams();\nconst [reviewsData, setReviewsData] = useState([]); \nconst [isAvatarLoaded, setIsAvatarLoaded] = useState(false);\nconst [status, setStatus] = useState(\"idle\")\n\n  useEffect(() => {\n   setStatus(\"pending\"); \n   const getFetchCast = async () => {\n      try {\n        const result = await fetchFilmsReviews(movieId);\n        if (!result.length) {\n          throw new Error(\"Reviews not found\");\n        }\n        setReviewsData(result)\n        setStatus(\"resolved\");\n        Scroll.animateScroll.scrollMore(500); \n      } catch (err) {\n        console.log(err);\n        setStatus(\"rejected\"); \n      }\n    }\n    getFetchCast();\n },[movieId])\n \n  const userAvatar = (avatarPath) => {\n    let avatar = Default;\n\n    if (avatarPath) {\n      avatar = avatarPath.startsWith(\"/http\")\n        ? avatarPath.slice(1)\n        : `${API_IMG.IMAGE_URL}/w200/${avatarPath}`;\n    }\n\n    return avatar;\n  };\n\n  if (status === \"idle\") {\n    <></>\n  }\n\n  if (status === \"pending\") {\n    return (\n      <LoaderWrapper>\n        <CircularProgress color=\"success\" />\n      </LoaderWrapper>\n    )\n  }\n\n  if (status === \"resolved\") {\n    return (\n    <ReviewList >\n          {reviewsData.map(({ id, author, author_details, content }) => {\n            const avatar = userAvatar(author_details.avatar_path);\n\n            return (\n              <ReviewItem key={id}>\n                <ReviewAuthorWrapper>\n                  <ReviewAuthorAvatar\n                    src={isAvatarLoaded ? avatar : Default}\n                    width=\"50\"\n                    height=\"50\"\n                    onLoad={() => setIsAvatarLoaded(true)}\n                  />\n                  <ReviewAuthorName>{author}</ReviewAuthorName>\n                </ReviewAuthorWrapper>\n                <ReviewContent>{content}</ReviewContent>\n              </ReviewItem>\n            );\n          })}\n      </ReviewList>\n  )\n  }\n  \n  if (status === \"rejected\") {\n    return <InfoTitle>There is no reviews.¯\\_(ツ)_/¯</InfoTitle> \n  }\n  \n}\n\nexport default Reviews"],"names":["axios","API_IMG","IMAGE_URL","fetchFilms","page","params","api_key","response","fetchFilmsByGenre","fetchFilmsById","id","data","fetchFilmsByCredits","cast","fetchFilmsReviews","results","fetchFilmsByQuery","query","fetchVideo","Wrapper","styled","TextWrapper","Poster","Title","Text","List","ListItem","LoaderWrapper","ReviewList","ReviewItem","ReviewAuthorWrapper","ReviewAuthorAvatar","ReviewAuthorName","ReviewContent","movieId","useParams","useState","reviewsData","setReviewsData","isAvatarLoaded","setIsAvatarLoaded","status","setStatus","useEffect","getFetchCast","result","length","Error","Scroll","console","log","CircularProgress","color","map","author","author_details","content","avatar","avatarPath","Default","startsWith","slice","userAvatar","avatar_path","src","width","height","onLoad"],"sourceRoot":""}