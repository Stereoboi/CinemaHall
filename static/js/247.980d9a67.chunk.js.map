{"version":3,"file":"static/js/247.980d9a67.chunk.js","mappings":"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","sources":["api/api.js","components/Cast/Cast.jsx","components/Cast/Cast.styled.js"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const API_IMG = {\n  IMAGE_URL: 'https://image.tmdb.org/t/p',\n}\n\nexport const fetchFilms = async page => {\n    const response = await axios.get('/trending/movie/week', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        page: page\n      }\n    })\n    \n    return response;\n};\n\nexport const fetchFilmsByGenre = async () => {\n    const response = await axios.get('/genre/movie/list', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        \n      }\n    })\n    \n  return response ;\n};\n\nexport const fetchFilmsById = async (id) => {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data;\n};\nexport const fetchFilmsByExternalId = async (id) => {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data;\n};\n\nexport const fetchFilmsByCredits = async (id) => {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data.cast;\n};\n\nexport const fetchFilmsReviews = async (id) => {\n    const response = await axios.get(`/movie/${id}/reviews`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n  return response.data.results;\n};\n\nexport const fetchFilmsByQuery = async (query, page) => {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        query: query,\n        page: page,\n      }\n    })\n  \n  return response;\n};\n\nexport const fetchVideo = async id => {\n  const response = await axios.get(`/movie/${id}/videos`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    }\n  );\n  return response.data.results;\n};\n\n\n  \n\n\n","import { useParams, } from \"react-router-dom\";\nimport { useEffect, useState} from \"react\";\nimport { fetchFilmsByCredits } from \"api/api\";\nimport { InfoTitle } from \"pages/Collection/Collection.styled\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport * as Scroll from 'react-scroll';\n\nimport {\n  Title,\n  Text,\n  List,\n  ListItem,\n  Wrapper,\n  Poster,\n  TextWrapper,\n  LoaderWrapper\n\n} from \"./Cast.styled\";\nimport Default from \"../../Images/Default.png\"\n\n\nconst Cast = () => { \nconst { movieId } = useParams();\nconst [castData, setCastData] = useState(null);\nconst [loaded, setLoaded] = useState(false);\nconst [status, setStatus]= useState(\"idle\")\n\n\n  useEffect(() => {\n   setStatus(\"pending\");\n   const getFetchCast = async () => {\n      try {\n        const result = await fetchFilmsByCredits(movieId);\n\n        if (!result.length) {\n          throw new Error(\"Cast not found\");\n        }\n         setCastData(result);\n         setStatus(\"resolved\")\n         Scroll.animateScroll.scrollMore(500); \n      } catch (err) {\n        console.log(err);\n        setStatus('rejected');\n      }\n    }\n    getFetchCast();\n    \n  }, [movieId])\n  \n  if (status === \"idle\") {\n    return <></>\n  }\n\n  if (status === \"pending\") {\n    return (\n      <LoaderWrapper>\n        <CircularProgress color=\"success\" />\n      </LoaderWrapper>\n    )\n  }\n  if (status === 'resolved') {\n\n    return (\n    <Wrapper >\n      <List  >\n          {castData.map(el => (\n          <ListItem key={el.id}>\n              <Poster\n                src={el.profile_path && loaded ?\n                  `https://image.tmdb.org/t/p/w500/${el.profile_path}`\n                  : Default}\n                alt={el.name}\n                width=\"150\"\n                onLoad={() => setLoaded(true)}\n                />\n              <TextWrapper>\n                <Title>Name</Title>\n                <Text>{el.name}</Text>\n                <Title>Character</Title>\n                <Text>{el.character}</Text>\n            </TextWrapper>\n          </ListItem>\n        ))}\n      </List>\n    </Wrapper>\n  )\n  }\n  if (status === 'rejected') {\n    return (\n      <InfoTitle > We don`t have information about cast, sorry ¯\\_(ツ)_/¯ </InfoTitle>\n    )\n  }\n}\n\nexport default Cast","import styled from \"styled-components\";\n\n\nexport const Wrapper = styled.div`\n  margin-top:35px;\n`\nexport const TextWrapper = styled.div`\n  padding:10px;\n  \n`\nexport const PageTitle = styled.h2`\n  margin-top:15px;\n`\nexport const Poster = styled.img`\n    height:300px;\n    width: 100%;\n    object-fit: cover;\n    border-bottom: 1px solid rgb(204, 204, 204);\n`\nexport const Title = styled.h3`\n    margin-bottom: 5px;\n    text-align: center;\n    font-size: 16px;\n    text-transform: uppercase;\n`\n\nexport const Text = styled.p`\n  margin: auto;\n    height: 100%;\n    font-size: 18px;\n    text-align: center;\n    color: dark-grey;\n      &:not(:last-child) {\n        margin-bottom: 10px;\n      }\n`\n\nexport const List = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n    gap: 20px 10px;\n`;\n\nexport const ListItem = styled.li`\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: rgb(0 0 0 / 20%) 0px 1px 3px 0px, rgb(0 0 0 / 14%) 0px 2px 5px 0px, rgb(0 0 0 / 12%) 0px 2px 10px -1px;\n`;\n\nexport const LoaderWrapper = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  /* bring your own prefixes */\n  transform: translate(-50%, -50%);\n`"],"names":["axios","API_IMG","IMAGE_URL","fetchFilms","page","params","api_key","response","fetchFilmsByGenre","fetchFilmsById","id","data","fetchFilmsByCredits","cast","fetchFilmsReviews","results","fetchFilmsByQuery","query","fetchVideo","movieId","useParams","useState","castData","setCastData","loaded","setLoaded","status","setStatus","useEffect","getFetchCast","result","length","Error","Scroll","console","log","color","map","el","src","profile_path","Default","alt","name","width","onLoad","character","Wrapper","styled","TextWrapper","Poster","Title","Text","List","ListItem","LoaderWrapper"],"sourceRoot":""}